'use client';

import React, { useEffect, useState } from 'react';
import { Card } from '@/components/ui/card';
import { Trophy, Download, Award, Shield, Star } from 'lucide-react';
import { getUserCertificateStats } from '@/utils/db/actions';
import { jsPDF } from 'jspdf';

const getBadgeIcon = (type) => {
  switch(type) {
    case 'gold': return <Trophy className="w-12 h-12 text-yellow-500" />;
    case 'silver': return <Award className="w-12 h-12 text-gray-400" />;
    case 'bronze': return <Shield className="w-12 h-12 text-orange-400" />;
    default: return <Star className="w-12 h-12 text-slate-400" />;
  }
};

const getCertificateType = (points: number, reported: number, collected: number) => {
  if (points === 0 && reported === 0 && collected === 0) return 'iron';
  if (points > 200 && reported > 100 && collected > 60) return 'gold';
  if (points >= 100 && reported >= 50 && collected >= 30) return 'silver';
  return 'bronze';
};

const downloadCertificate = () => {
  const pdf = new jsPDF({
    orientation: 'landscape',
    unit: 'mm',
    format: 'a4'
  });
  
  const width = pdf.internal.pageSize.getWidth();
  const height = pdf.internal.pageSize.getHeight();
  
  // Set background color based on certificate type
  const bgColors = {
    gold: '#FEF9C3',   // Light yellow
    silver: '#F3F4F6',  // Light gray
    bronze: '#FFF7ED',  // Light orange
    iron: '#F8FAFC'     // Light slate
  };
  
  const textColors = {
    gold: '#B45309',    // Dark yellow
    silver: '#374151',  // Dark gray
    bronze: '#9A3412',  // Dark orange
    iron: '#475569'     // Dark slate
  };

  // Background
  pdf.setFillColor(bgColors[certificateType]);
  pdf.rect(0, 0, width, height, 'F');

  // Border
  pdf.setDrawColor(textColors[certificateType]);
  pdf.setLineWidth(0.5);
  pdf.rect(10, 10, width - 20, height - 20, 'S');
  
  // Title
  pdf.setTextColor(0, 0, 0);
  pdf.setFontSize(40);
  pdf.text('Certificate of Excellence', width/2, 40, { align: 'center' });
  
  // Level
  pdf.setFontSize(30);
  pdf.setTextColor(textColors[certificateType]);
  pdf.text(`${certificateType.toUpperCase()} Level Recycler`, width/2, 60, { align: 'center' });
  
  // Name
  pdf.setTextColor(0, 0, 0);
  pdf.setFontSize(24);
  pdf.text('This certifies that', width/2, 80, { align: 'center' });
  pdf.setFontSize(28);
  pdf.text(userData.name, width/2, 100, { align: 'center' });
  
  // Stats
  pdf.setFontSize(16);
  const stats = [
    `Total Points: ${userData.points}`,
    `Wastes Reported: ${userData.reportedWastes}`,
    `Wastes Collected: ${userData.collectedWastes}`
  ];
  
  stats.forEach((stat, index) => {
    pdf.text(stat, width/2, 130 + (index * 10), { align: 'center' });
  });
  
  // Date
  pdf.setFontSize(12);
  pdf.text(`Issued on ${userData.date}`, width/2, height - 20, { align: 'center' });
  
  pdf.save(`${certificateType}_certificate.pdf`);
};


const colorSchemes = {
  gold: { bg: 'bg-yellow-50', border: 'border-yellow-500', text: 'text-yellow-700' },
  silver: { bg: 'bg-gray-50', border: 'border-gray-400', text: 'text-gray-700' },
  bronze: { bg: 'bg-orange-50', border: 'border-orange-400', text: 'text-orange-700' },
  iron: { bg: 'bg-slate-50', border: 'border-slate-400', text: 'text-slate-700' }
};

const CertificatePage = () => {
  const [userData, setUserData] = useState({
    points: 0,
    reportedWastes: 0,
    collectedWastes: 0,
    name: '',
    date: new Date().toLocaleDateString()
  });

  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const userId = 1; // Replace with actual user ID from your auth system
        const stats = await getUserCertificateStats(userId);
        setUserData(stats);
      } catch (error) {
        console.error('Error:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const certificateType = getCertificateType(
    userData.points,
    userData.reportedWastes,
    userData.collectedWastes
  );

  const colors = colorSchemes[certificateType];

  const downloadCertificate = () => {
    const pdf = new jsPDF({
      orientation: 'landscape',
      unit: 'mm',
      format: 'a4'
    });
    
    const width = pdf.internal.pageSize.getWidth();
    const height = pdf.internal.pageSize.getHeight();
    
    // pdf.setFillColor(colors.bg);
    pdf.rect(0, 0, width, height, 'F');
    
    pdf.setTextColor(0);
    pdf.setFontSize(40);
    pdf.text('Certificate of Achievement', width/2, 40, { align: 'center' });
    
    pdf.setFontSize(30);
    pdf.text(`${certificateType.toUpperCase()} Level Recycler`, width/2, 60, { align: 'center' });
    
    pdf.setFontSize(20);
    pdf.text(userData.name, width/2, 100, { align: 'center' });
    
    pdf.setFontSize(16);
    pdf.text(`Total Points: ${userData.points}`, width/2, 130, { align: 'center' });
    pdf.text(`Wastes Reported: ${userData.reportedWastes}`, width/2, 140, { align: 'center' });
    pdf.text(`Wastes Collected: ${userData.collectedWastes}`, width/2, 150, { align: 'center' });
    
    pdf.setFontSize(12);
    pdf.text(`Issued on ${userData.date}`, width/2, height - 20, { align: 'center' });
    
    pdf.save(`${certificateType}_certificate.pdf`);
  };

  if (loading) {
    return <div className="flex justify-center items-center h-screen">Loading...</div>;
  }

  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-4 bg-gray-50">
      <Card className={`w-full max-w-4xl bg-white shadow-xl relative overflow-hidden`}>
        {/* Border Design */}
        <div className="absolute inset-0 border-8 border-double opacity-20" />
        
        {/* Background Pattern */}
        <div className="absolute inset-0 opacity-5">
          <div className="absolute inset-0 bg-[radial-gradient(circle_at_center,#000_1px,transparent_1px)] bg-[length:20px_20px]" />
        </div>
        
        <div className="relative p-16 text-center">
          {/* Header */}
          <div className="flex justify-center gap-4 mb-8">
            <div className="absolute top-6 right-6 flex gap-2">
              {[...Array(3)].map((_, i) => (
                <div key={i} className="w-2 h-2 rounded-full bg-gray-300" />
              ))}
            </div>
          </div>
          
          {/* Title */}
          <div className="mb-12">
            <h1 className="text-4xl font-serif font-bold text-gray-800 mb-4">
              Certificate of Excellence
            </h1>
            <div className="w-32 h-1 bg-gradient-to-r from-transparent via-gray-400 to-transparent mx-auto" />
          </div>
          
          {/* Badge */}
          <div className="flex justify-center mb-8">
            <div className={`p-6 rounded-full ${
              certificateType === 'gold' ? 'bg-yellow-100' :
              certificateType === 'silver' ? 'bg-gray-100' :
              certificateType === 'bronze' ? 'bg-orange-100' :
              'bg-slate-100'
            }`}>
              {getBadgeIcon(certificateType)}
            </div>
          </div>
          
          {/* Content */}
          <div className="space-y-6">
            <p className="text-xl text-gray-600">This is to certify that</p>
            <h2 className="text-3xl font-bold text-gray-800 font-serif">{userData.name}</h2>
            <p className="text-xl text-gray-600">has achieved the rank of</p>
            <h3 className={`text-2xl font-bold capitalize mb-8 ${
              certificateType === 'gold' ? 'text-yellow-600' :
              certificateType === 'silver' ? 'text-gray-600' :
              certificateType === 'bronze' ? 'text-orange-600' :
              'text-slate-600'
            }`}>
              {certificateType} Level Recycler
            </h3>
            
            {/* Stats */}
            <div className="grid grid-cols-3 gap-8 my-12">
              {[
                { label: 'Total Points', value: userData.points },
                { label: 'Wastes Reported', value: userData.reportedWastes },
                { label: 'Wastes Collected', value: userData.collectedWastes }
              ].map((stat, i) => (
                <div key={i} className="p-4 rounded-lg bg-gray-50">
                  <p className="text-gray-600 text-sm mb-1">{stat.label}</p>
                  <p className="text-2xl font-bold text-gray-800">{stat.value}</p>
                </div>
              ))}
            </div>
            
            {/* Date */}
            <div className="mt-12">
              <p className="text-gray-600">Issued on</p>
              <p className="text-lg font-semibold">{userData.date}</p>
            </div>
          </div>
          
          {/* Download Button */}
          <button
            onClick={downloadCertificate}
            className="absolute bottom-6 right-6 p-3 rounded-full bg-gray-800 text-white hover:bg-gray-700 transition-colors duration-200"
          >
            <Download className="w-6 h-6" />
          </button>
        </div>
      </Card>
    </div>
  );
};

export default CertificatePage;